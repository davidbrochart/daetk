#ifndef GENERATED_OPERATORS_H
#define GENERATED_OPERATORS_H
namespace CMRVecOperators
{
#ifndef NO_EXPRESSION_TEMPLATES
#include "Definitions.h"

///////////////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE WAS GENERATED AUTOMATICALLY!
// YOU SHOULD MODIFY THE INPUT FILES INSTEAD OF CHANGING THIS FILE DIRECTLY!
//
// THE FOLLOWING INPUT FILES WERE USED TO MAKE THIS FILE:
//
// MakeOperators
// CMRVecDefs.in
//
///////////////////////////////////////////////////////////////////////////////


  using namespace Pete;

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
acos(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcCos,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
acos(const Expression<T1> & l)
{
  typedef UnaryNode<FnArcCos,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
asin(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcSin,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
asin(const Expression<T1> & l)
{
  typedef UnaryNode<FnArcSin,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
atan(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnArcTan,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
atan(const Expression<T1> & l)
{
  typedef UnaryNode<FnArcTan,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
ceil(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCeil,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
ceil(const Expression<T1> & l)
{
  typedef UnaryNode<FnCeil,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
cos(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnCos,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
cos(const Expression<T1> & l)
{
  typedef UnaryNode<FnCos,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
cosh(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypCos,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
cosh(const Expression<T1> & l)
{
  typedef UnaryNode<FnHypCos,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
exp(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnExp,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
exp(const Expression<T1> & l)
{
  typedef UnaryNode<FnExp,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
fabs(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFabs,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
fabs(const Expression<T1> & l)
{
  typedef UnaryNode<FnFabs,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
floor(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnFloor,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
floor(const Expression<T1> & l)
{
  typedef UnaryNode<FnFloor,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
log(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
log(const Expression<T1> & l)
{
  typedef UnaryNode<FnLog,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
log10(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnLog10,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
log10(const Expression<T1> & l)
{
  typedef UnaryNode<FnLog10,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
sin(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSin,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
sin(const Expression<T1> & l)
{
  typedef UnaryNode<FnSin,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
sinh(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypSin,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
sinh(const Expression<T1> & l)
{
  typedef UnaryNode<FnHypSin,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
sqrt(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnSqrt,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
sqrt(const Expression<T1> & l)
{
  typedef UnaryNode<FnSqrt,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
tan(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnTan,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
tan(const Expression<T1> & l)
{
  typedef UnaryNode<FnTan,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
tanh(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<FnHypTan,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
tanh(const Expression<T1> & l)
{
  typedef UnaryNode<FnHypTan,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
operator-(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryMinus,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l)
{
  typedef UnaryNode<OpUnaryMinus,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
operator+(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpUnaryPlus,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l)
{
  typedef UnaryNode<OpUnaryPlus,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
operator~(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpBitwiseNot,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator~(const Expression<T1> & l)
{
  typedef UnaryNode<OpBitwiseNot,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
PETE_identity(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpIdentity,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
PETE_identity(const Expression<T1> & l)
{
  typedef UnaryNode<OpIdentity,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> >::Expression_t
operator!(const Daetk::CMRVec<T1> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l)));
}

template<class T1>
inline typename MakeReturn<UnaryNode<OpNot,
  typename CreateLeaf<Expression<T1> >::Leaf_t> >::Expression_t
operator!(const Expression<T1> & l)
{
  typedef UnaryNode<OpNot,
    typename CreateLeaf<Expression<T1> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
peteCast(const T1&, const Daetk::CMRVec<T2> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T2> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<UnaryNode<OpCast<T1>,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
peteCast(const T1&, const Expression<T2> & l)
{
  typedef UnaryNode<OpCast<T1>,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T2> >::make(l)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator+(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator-(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator*(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator/(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator%(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator&(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator|(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator^(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
ldexp(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
pow(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
fmod(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
atan2(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<=(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>=(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator==(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator!=(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator&&(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator||(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<<(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>>(const Daetk::CMRVec<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const Daetk::CMRVec<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator+(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator-(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator*(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator/(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator%(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator|(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator^(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
ldexp(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
pow(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
fmod(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
atan2(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<=(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>=(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator==(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator!=(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator&&(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator||(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator<<(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const Daetk::CMRVec<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t> >::Expression_t
operator>>(const Expression<T1> & l,const T2 & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(l),
    CreateLeaf<T2 >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAdd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator+(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAdd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpSubtract,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator-(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpSubtract,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMultiply,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator*(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMultiply,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpDivide,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator/(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpDivide,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpMod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator%(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpMod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator|(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpBitwiseXor,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator^(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpBitwiseXor,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnLdexp,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
ldexp(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnLdexp,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
pow(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnPow,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
pow(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnPow,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnFmod,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
fmod(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnFmod,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<FnArcTan2,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
atan2(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<FnArcTan2,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<=(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGT,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGT,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpGE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>=(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpGE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpEQ,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator==(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpEQ,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpNE,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator!=(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpNE,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpAnd,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator&&(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpAnd,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpOr,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator||(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpOr,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}
#ifdef PETE_ALLOW_SCALAR_SHIFT

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpLeftShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator<<(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpLeftShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const Daetk::CMRVec<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Daetk::CMRVec<T2> >::make(r)));
}

template<class T1,class T2>
inline typename MakeReturn<BinaryNode<OpRightShift,
  typename CreateLeaf<T1 >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t> >::Expression_t
operator>>(const T1 & l,const Expression<T2> & r)
{
  typedef BinaryNode<OpRightShift,
    typename CreateLeaf<T1 >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<T1 >::make(l),
    CreateLeaf<Expression<T2> >::make(r)));
}
#endif // PETE_ALLOW_SCALAR_SHIFT

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const Daetk::CMRVec<T2> & t,const Daetk::CMRVec<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<Daetk::CMRVec<T2> >::make(t),
    CreateLeaf<Daetk::CMRVec<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
  typename CreateLeaf<Expression<T3> >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const Daetk::CMRVec<T2> & t,const Expression<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
    typename CreateLeaf<Expression<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<Daetk::CMRVec<T2> >::make(t),
    CreateLeaf<Expression<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const Expression<T2> & t,const Daetk::CMRVec<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<Expression<T2> >::make(t),
    CreateLeaf<Daetk::CMRVec<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t,
  typename CreateLeaf<Expression<T3> >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const Expression<T2> & t,const Expression<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t,
    typename CreateLeaf<Expression<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<Expression<T2> >::make(t),
    CreateLeaf<Expression<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const Daetk::CMRVec<T2> & t,const Daetk::CMRVec<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<Daetk::CMRVec<T2> >::make(t),
    CreateLeaf<Daetk::CMRVec<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
  typename CreateLeaf<Expression<T3> >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const Daetk::CMRVec<T2> & t,const Expression<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
    typename CreateLeaf<Expression<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<Daetk::CMRVec<T2> >::make(t),
    CreateLeaf<Expression<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const Expression<T2> & t,const Daetk::CMRVec<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<Expression<T2> >::make(t),
    CreateLeaf<Daetk::CMRVec<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t,
  typename CreateLeaf<Expression<T3> >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const Expression<T2> & t,const Expression<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t,
    typename CreateLeaf<Expression<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<Expression<T2> >::make(t),
    CreateLeaf<Expression<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const Daetk::CMRVec<T2> & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<Daetk::CMRVec<T2> >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const Expression<T2> & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<Expression<T2> >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const Daetk::CMRVec<T2> & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T2> >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<Daetk::CMRVec<T2> >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<Expression<T2> >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const Expression<T2> & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<Expression<T2> >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<Expression<T2> >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const T2 & t,const Daetk::CMRVec<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<Daetk::CMRVec<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<Expression<T3> >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const T2 & t,const Expression<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<Expression<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<Expression<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const T2 & t,const Daetk::CMRVec<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<Daetk::CMRVec<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<Daetk::CMRVec<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<Expression<T3> >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const T2 & t,const Expression<T3> & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<Expression<T3> >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<Expression<T3> >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Daetk::CMRVec<T1> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Daetk::CMRVec<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Daetk::CMRVec<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}

template<class T1,class T2,class T3>
inline typename MakeReturn<TrinaryNode<FnWhere,
  typename CreateLeaf<Expression<T1> >::Leaf_t,
  typename CreateLeaf<T2 >::Leaf_t,
  typename CreateLeaf<T3 >::Leaf_t> >::Expression_t
where(const Expression<T1> & c,const T2 & t,const T3 & f)
{
  typedef TrinaryNode<FnWhere,
    typename CreateLeaf<Expression<T1> >::Leaf_t,
    typename CreateLeaf<T2 >::Leaf_t,
    typename CreateLeaf<T3 >::Leaf_t> Tree_t;
  return MakeReturn<Tree_t>::make(Tree_t(
    CreateLeaf<Expression<T1> >::make(c),
    CreateLeaf<T2 >::make(t),
    CreateLeaf<T3 >::make(f)));
}

#else  //ifdef NO_EXPRESSION_TEMPLATES
#include "CMRVecIterator.h"
#include "CMRVecConstIterator.h"

template<class T>
Daetk::CMRVec<T>& operator*=(Daetk::CMRVec<T> &x, const T &a)
{
  Daetk::CMRVecIterator<T> ix(x);
  while (ix < x.end())
    {
      (*ix)*=a;
      ++ix;
    }
  return x;
}

template<class T>
Daetk::CMRVec<T> operator*(const T &a, const Daetk::CMRVec<T> &x)
{
      Daetk::CMRVec<T> result(x.dim());
      Daetk::CMRVecConstIterator<T> ix(x);
      Daetk::CMRVecIterator<T> iresult(result);
      while ( ix < x.end() )
        {
          *iresult=(*ix)*a;
          ++iresult;
          ++ix;
        }
      return result;
}

template<class T>
Daetk::CMRVec<T> operator/(const T &a, const Daetk::CMRVec<T> &x)
{
  assert(a!=0.0);
      Daetk::CMRVec<T> result(x.dim());
      Daetk::CMRVecConstIterator<T> ix(x);
      Daetk::CMRVecIterator<T> iresult(result);
      while ( ix < x.end() )
        {
          *iresult=(*ix)/a;
          ++iresult;
          ++ix;
        }
      return result;
}

template<class T>
Daetk::CMRVec<T> operator*(const Daetk::CMRVec<T> &x, const T &a)
{
      return Daetk::CMRVec<T>::operator*(a,x);
}

template<class T>
Daetk::CMRVec<T> operator/(const Daetk::CMRVec<T> &x, const T &a)
{
      return Daetk::CMRVec<T>::operator/(a,x);
}

template<class T>
Daetk::CMRVec<T> operator+(const Daetk::CMRVec<T> &x, const Daetk::CMRVec<T> &y)
{
  assert(x.size() == y.size());
  /*
  if (x.size() != y.size())
    {
      cout << "Incompatible vector lengths in +." << endl;
      exit(1);
    }
    */
  Daetk::CMRVec<T> result(x.dim());
  Daetk::CMRVecConstIterator<T> ix(x),iy(y);
  Daetk::CMRVecIterator<T> iresult(result);
  while (ix < x.end())
    {
    *(iresult) = *(ix) + *(iy);
    ++iresult;
    ++ix;
    ++iy;
    }
  return result;
}
          
template<class T>
Daetk::CMRVec<T> operator-(const Daetk::CMRVec<T> &x, const Daetk::CMRVec<T> &y)
{
  assert(x.size() == y.size());
  /*
  if (x.size() != y.size())
    {
      cout << "Incompatible vector lengths in -." << endl;
      exit(1);
    }
    */
  Daetk::CMRVec<T> result(x.size());
  Daetk::CMRVecConstIterator<T> ix(x),iy(y);
  Daetk::CMRVecIterator<T> iresult(result);
  while ( iresult < result.end())
    {
      (*iresult) = (*ix) - (*iy);
      ++iresult;
      ++ix;
      ++iy;
    }
  return result;
}
          

template<class T>
Daetk::CMRVec<T>& operator+=(Daetk::CMRVec<T> &x, const Daetk::CMRVec<T> &y)
{
  assert(x.size() == y.size());
  /*
  if (x.size() != y.size())
    {
      cout << "Incompatible vector lengths in -." << endl;
      exit(1);
    }
    */
  Daetk::CMRVecConstIterator<T> iy(y);
  Daetk::CMRVecIterator<T> ix(x);
  while (ix <x.end() )
    {
      (*ix)+=(*iy);
      ++ix;
      ++iy;
    }
  return x;
}
          
      
template<class T>
Daetk::CMRVec<T>& operator-=(Daetk::CMRVec<T> &x, const Daetk::CMRVec<T> &y)
{
  assert(x.size() == y.size());
  /*
  if (x.size() != y.size())
    {
      cout << "Incompatible vector lengths in -." << endl;
      exit(1);
    }
    */
  Daetk::CMRVecConstIterator<T> iy(y);
  Daetk::CMRVecIterator<T> ix(x);
  while (ix < x.end())
    {
      (*ix)-=(*iy);
      ++ix;
      ++iy;
    }
  return x;
}
          
#endif
}//CMRVecOperators
#endif // GENERATED_OPERATORS_H

